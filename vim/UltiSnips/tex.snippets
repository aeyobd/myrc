global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'
def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'
endglobal


snippet beg "begin{} / end{}" b
\begin{$1}
	$0
\end{$1}
endsnippet 

snippet abc "begin alph enumerate" b
\begin{enumerate}[(a)]
	\item $1
\end{enumerate}$0
endsnippet

snippet item "Itemize" b
\begin{itemize}[(a)]
	\item $1
\end{itemize}$0
endsnippet

snippet prob "Problem" b
\begin{problem}{$1}
	$2
\end{problem}
$0
endsnippet

snippet sol "Solution" b
\begin{solution}
	$1
\end{solution}
$0
endsnippet

snippet prf "Proof" b
\begin{proof}
	$1
\end{proof}
$0
endsnippet

snippet mk "Math" w
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" w

\[
	${1:${VISUAL}}
\] $0
endsnippet

snippet bga "Align" w

\begin{align*}
	${1:${VISUAL}}
\end{align*}
endsnippet

snippet bgg "Gather" w

\begin{gather*}
	$1
\end{gather*}
endsnippet



context "math()"
snippet RR "double R" w
\mathbb{R}
endsnippet

context "math()"
snippet CC "double C" w
\mathbb{C}
endsnippet

context "math()"
snippet ZZ "double Z" w
\mathbb{Z}
endsnippet

context "math()"
snippet QQ "double Q" w
\mathbb{Q}
endsnippet

context "math()"
snippet EE "script E" w
\mathcal{E}
endsnippet

context "math()"
snippet TT "script T" w
\mathcal{T}
endsnippet

context "math()"
snippet II "script I" w
\mathcal{I}
endsnippet


context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wr
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wr
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet '([A-Za-z]_\d)\^(\d)' "auto subscript power" wr
{`!p snip.rv = match.group(1) `}^`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet sr "^2" i
^2
endsnippet

context "math()"
snippet cb "^3" i
^3
endsnippet

context "math()"
snippet compl "complement" i
^{c}
endsnippet

context "math()"
snippet // "Fraction" i
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wr
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
priority 1000
snippet '^.+\)/' "() Fraction" wr
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while i:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
if depth and not i:
	snip.rv = stripped
else:
	snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

priority 1000
snippet math "mathematica block" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "evaluate mathematica" wr
`!p
import subprocess
code = 'ToString[' + match.group(1) + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

context "math()"
priority 10
snippet "bar" "bar" ri
\overline{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])bar" "bar" ri
\overline{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
priority 10
snippet "hat" "hat" ri
\hat{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])hat" "hat" ri
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" ri
\vec{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "\<(.*?)\|" "bra" ri
\bra{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

context "math()"
snippet "\|(.*?)\>" "ket" ri
\ket{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

context "math()"
snippet "(.*)\\bra{(.*?)}([^\|]*?)\>" "braket" ri
`!p snip.rv = match.group(1)`\braket{`!p snip.rv = match.group(2)`}{`!p snip.rv = match.group(3).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

context "math()"
snippet () "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

context "math()"
snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "math()"
snippet lra "leftangle rightangle" i
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet (( "Parns" w
\left( $1 \right) $0
endsnippet

context "math()"
snippet [[ "Parns" w
\left[ $1 \right] $0
endsnippet

context "math()"
snippet "{{" "Parns" w
\left{ $1 \right} $0
endsnippet

snippet ... "Dots" w
\ldots
endsnippet

context "math()"
snippet abb "Subscript" i
\_\{ $1\} sfutd $0
endsnippet

context "math()"
snippet ^^ "Superscript" i
^{$1}$0
endsnippet

context "math()"
snippet ddx "derivative" w
\fract{d}{dx}
endsnippet

snippet lim "limit" w
\\lim_\{ ${1:hi} \\to ${2:\infty} \} $0
endsnippet

context "math()"
snippet prod "product" w
\\prod_\{$1\}^\{$2\} $0
endsnippet

context "math()"
snippet int "integral" w
\int_{${1:n}}^{${2:\infty}} ${3:${VISUAL}} d${4:x} $0
endsnippet

snippet test "test" i
a\{$1\}$0
endsnippet

context "math()"
snippet sq "\sqrt{}" i
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet uuu "bigcup" i
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet nnn "bigcap" i
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet


context "math()"
snippet "([a-zA-Z0-9})])([+-])" "plus" ir
`!p snip.rv = match.group(1) + " " + match.group(2)` $0
endsnippet

priority 100
context "math()"
snippet "([^&])=" "equals" ir
`!p snip.rv = match.group(1)` = $0
endsnippet

priority 1000
context "math()"
snippet >= "equals" i
 \geq 
endsnippet

priority 1000
context "math()"
snippet <= "equals" i
 \leq  
endsnippet

context "math()"
snippet tt "text" i
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" w
\begin{cases}
	$1
\end{cases}
endsnippet

